package com.cmb;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.util.Base64;

import com.caverock.androidsvg.SVG;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RCTCmbUtility {
    public static WritableMap convertJsonToMap(JSONObject jsonObject) throws JSONException {
        WritableMap map = new WritableNativeMap();

        Iterator<String> iterator = jsonObject.keys();
        while (iterator.hasNext()) {
            String key = iterator.next();
            Object value = jsonObject.get(key);
            if (value instanceof JSONObject) {
                map.putMap(key, convertJsonToMap((JSONObject) value));
            } else if (value instanceof JSONArray) {
                map.putArray(key, convertJsonToArray((JSONArray) value));
                if (("option_values").equals(key)) {
                    map.putArray("options", convertJsonToArray((JSONArray) value));
                }
            } else if (value instanceof Boolean) {
                map.putBoolean(key, (Boolean) value);
            } else if (value instanceof Integer) {
                map.putInt(key, (Integer) value);
            } else if (value instanceof Double) {
                map.putDouble(key, (Double) value);
            } else if (value instanceof String) {
                map.putString(key, (String) value);
            } else {
                map.putString(key, value.toString());
            }
        }
        return map;
    }

    public static WritableArray convertJsonToArray(JSONArray jsonArray) throws JSONException {
        WritableArray array = new WritableNativeArray();

        for (int i = 0; i < jsonArray.length(); i++) {
            Object value = jsonArray.get(i);
            if (value instanceof JSONObject) {
                array.pushMap(RCTCmbUtility.convertJsonToMap((JSONObject) value));
            } else if (value instanceof JSONArray) {
                array.pushArray(convertJsonToArray((JSONArray) value));
            } else if (value instanceof Boolean) {
                array.pushBoolean((Boolean) value);
            } else if (value instanceof Integer) {
                array.pushInt((Integer) value);
            } else if (value instanceof Double) {
                array.pushDouble((Double) value);
            } else if (value instanceof String) {
                array.pushString((String) value);
            } else {
                array.pushString(value.toString());
            }
        }
        return array;
    }

    public static String base64ImageFromSVG(String svg) {
        Bitmap graphics = RCTCmbUtility.renderSvg(svg);

        if (graphics != null) {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            graphics.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);
            byte[] byteArray = byteArrayOutputStream.toByteArray();

            return Base64.encodeToString(byteArray, Base64.DEFAULT);
        }

        return null;
    }

    public static Bitmap renderSvg(String svgString) {
        try {
            int svgWidth = 0;
            int svgHeight = 0;

            String regex = "<svg.*width=\"(.*)px\".*height=\"(.*)px\".*>";
            Pattern mPattern = Pattern.compile(regex);
            Matcher matcher = mPattern.matcher(svgString.replaceAll("\\r", "   ").replaceAll("\\n", "   "));
            if (matcher.find() && matcher.group(1) != null && matcher.group(2) != null) {
                svgWidth = Integer.parseInt(matcher.group(1));
                svgHeight = Integer.parseInt(matcher.group(2));
            }

            SVG svg = SVG.getFromString(svgString);
            svg.setDocumentHeight(svgHeight);
            svg.setDocumentWidth(svgWidth);

            Bitmap svgBitmap = Bitmap.createBitmap(svgWidth, svgHeight, Bitmap.Config.ARGB_4444);
            Canvas canvas = new Canvas(svgBitmap);
            svg.renderToCanvas(canvas);

            return svgBitmap;
        } catch (Exception ignored) {
        }

        return null;
    }
}
